#include <iostream>

using namespace std;

// Function to count comparisons and build a max heap
int buildHeap(int arr[], int n, int &count) {
    count = 0;
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i, count);
}

// Function to count comparisons and maintain heap property
void heapify(int arr[], int n, int i, int &count) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    count++; // comparison for finding the largest
    if (l < n && arr[l] > arr[largest])
        largest = l;

    count++; // comparison for finding the largest
    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest, count);
    }
}

// Function to count comparisons and sort the array using heap sort
void heapSort(int arr[], int n, int &count) {
    buildHeap(arr, n, count);

    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0, count);
    }
}

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int count = 0;
    heapSort(arr, n, count);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    cout << "Number of comparisons: " << count << endl;

    return 0;
}
