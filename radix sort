#include <iostream>
using namespace std;

// Function to get the maximum value in the array
int getMax(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; ++i) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// Function to perform counting sort based on a particular digit (exp)
void countingSort(int arr[], int n, int exp) {
    int output[n], count[10] = {0};
    // Count occurrences of each digit
    for (int i = 0; i < n; ++i) {
        count[(arr[i] / exp) % 10]++;
    }
    // Cumulative sum of counts
    for (int i = 1; i < 10; ++i) {
        count[i] += count[i - 1];
    }
    // Build the output array
    for (int i = n - 1; i >= 0; --i) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }
    // Copy the output array to original array
    for (int i = 0; i < n; ++i) {
        arr[i] = output[i];
    }
}
// Function to perform Radix Sort
void radixSort(int arr[], int n) {
    // Find the maximum element to know the number of digits
    int max = getMax(arr, n);
    // Perform counting sort for every digit place
    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSort(arr, n, exp);
    }
}

int main() {
    int arr[] = {170, 45, 75, 90, 802, 24, 2, 66};
    int n = sizeof(arr) / sizeof(arr[0]);

    radixSort(arr, n);

    cout << "Sorted array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}

